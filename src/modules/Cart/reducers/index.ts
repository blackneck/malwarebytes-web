import { handleActions } from "redux-actions";

import { applyRemoteProductUpdate } from "../../../common/WebSocketListener/actions";
import {
  updateProductFail,
  updateProductRequest,
} from "../../Products/actions";
import { setCartUpdatedProduct } from "../actions";
import { CartState } from "../types";

const initialState: CartState = {
  products: {},
};

export default handleActions(
  {
    // @ts-ignore
    [updateProductRequest]: (
      state: CartState,
      { payload }: { payload: { id: string; delta: number } }
    ) => ({
      ...state,
      products: {
        ...state.products,
        [payload.id]: state.products[payload.id]
          ? state.products[payload.id] + payload.delta * -1
          : payload.delta * -1,
      },
    }),
    // @ts-ignore
    [updateProductFail]: (
      state: CartState,
      { payload }: { payload: { id: string; delta: number } }
    ) => ({
      ...state,
      products: {
        ...state.products,
        [payload.id]: state.products[payload.id] - payload.delta * -1,
      },
    }),
    // @ts-ignore
    [applyRemoteProductUpdate]: (
      state: CartState,
      { payload }: { payload: { _id: string; delta: number; cartId?: string } }
    ) => {
      if (payload.cartId) {
        return {
          ...state,
          products: {
            ...state.products,
            [payload._id]: state.products[payload._id]
              ? state.products[payload._id] + payload.delta * -1
              : payload.delta * -1,
          },
        };
      } else return state;
    },
    // @ts-ignore
    [setCartUpdatedProduct]: (
      state: CartState,
      { payload }: { payload?: { id: string; delta: number } }
    ) => ({
      ...state,
      updatedProduct: payload
        ? {
            ...payload,
            delta: state.updatedProduct
              ? payload.delta + state.updatedProduct.delta
              : payload.delta,
          }
        : payload,
    }),
  },
  initialState
);
