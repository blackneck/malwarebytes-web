import { all, call, put, takeLatest } from "redux-saga/effects";

import { makeRequest } from "../../../services/api/axios";
import { getProductsRequestConfig } from "../../../services/api/products";
import { GetProductsParameters } from "../../../services/api/types";

import * as actions from "../actions";

export function* handleGetProductsRequest({
  payload,
}: {
  payload: GetProductsParameters;
}) {
  try {
    const response = yield call(
      makeRequest,
      getProductsRequestConfig({ ...payload })
    );

    yield put(
      actions.getProductsSuccess({ data: response.data, page: payload.page })
    );
  } catch (error) {
    yield put(actions.getProductsFail(error));
  }
}

export default function* productsSaga() {
  yield all([takeLatest(actions.getProductsRequest, handleGetProductsRequest)]);
}
