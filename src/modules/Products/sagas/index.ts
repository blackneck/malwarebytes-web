import { all, call, put, takeEvery, takeLatest } from "redux-saga/effects";

import { makeRequest } from "src/services/api/axios";
import {
  getProductsRequestConfig,
  updateProductsRequestConfig,
} from "src/services/api/products";
import {
  GetProductsParameters,
  UpdateProductsParameters,
} from "src/services/api/types";

import * as actions from "../actions";

export function* handleGetProductsRequest({
  payload,
}: {
  payload: GetProductsParameters;
}) {
  try {
    const response = yield call(
      makeRequest,
      getProductsRequestConfig({ ...payload })
    );

    yield put(
      actions.getProductsSuccess({ data: response.data, page: payload.page })
    );
  } catch (error) {
    yield put(actions.getProductsFail(error));
  }
}

export function* handleUpdateProductsRequest({
  payload,
}: {
  payload: UpdateProductsParameters;
}) {
  try {
    yield call(makeRequest, updateProductsRequestConfig({ ...payload }));

    yield put(actions.updateProductSuccess());
  } catch (error) {
    yield put(actions.updateProductFail(payload));
  }
}

export default function* productsSaga() {
  yield all([
    takeLatest(actions.getProductsRequest, handleGetProductsRequest),
    takeEvery(actions.updateProductRequest, handleUpdateProductsRequest),
  ]);
}
