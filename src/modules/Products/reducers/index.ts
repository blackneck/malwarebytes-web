import { handleActions } from "redux-actions";

import { WebSocketNotification } from "../../../common/WebSocketListener/types";
import { updateProductFail, updateProductRequest } from "../../Cart/actions";
import * as actions from "../actions";
import { ProductsState, Product } from "../types";

const initialState: ProductsState = {
  products: {},
  page: 1,
  isLoading: false,
  currentProductId: undefined,
};

export default handleActions(
  {
    // @ts-ignore
    [actions.setCurrentProductId]: (
      state: ProductsState,
      { payload }: { payload: string }
    ): ProductsState => ({
      ...state,
      currentProductId: payload,
    }),
    // @ts-ignore
    [actions.getProductsSuccess]: (
      state: ProductsState,
      {
        payload,
      }: { payload: { data: { [index: string]: Product }; page: number } }
    ): ProductsState => {
      return {
        ...state,
        isLoading: false,
        products: payload.page
          ? { ...state.products, ...payload.data }
          : payload.data,
        page: payload.page ? payload.page : 1,
      };
    },
    // @ts-ignore
    [updateProductRequest]: (
      state: ProductsState,
      { payload }: { payload: { id: string; delta: number } }
    ) => ({
      ...state,
      products: {
        ...state.products,
        [payload.id]: {
          ...state.products[payload.id],
          quantity: state.products[payload.id].quantity + payload.delta,
        },
      },
    }),
    // @ts-ignore
    [updateProductFail]: (
      state: ProductsState,
      { payload }: { payload: { id: string; delta: number } }
    ) => ({
      ...state,
      products: {
        ...state.products,
        [payload.id]: {
          ...state.products[payload.id],
          quantity: state.products[payload.id].quantity - payload.delta,
        },
      },
    }),
    // @ts-ignore
    [actions.notifyProducts]: (
      state: ProductsState,
      { payload }: { payload: WebSocketNotification }
    ) => ({
      ...state,
      products: {
        ...state.products,
        [payload._id]: {
          ...state.products[payload._id],
          quantity: state.products[payload._id].quantity + payload.delta,
        },
      },
    }),
  },
  initialState
);
